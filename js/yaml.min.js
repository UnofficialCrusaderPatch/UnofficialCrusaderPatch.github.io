// Simple YAML parser (handles most common YAML, not all edge cases)
function parseYAML(yaml) {
    const lines = yaml.split('\n');
    const result = {};
    let currentIndent = 0;
    let parents = [result];
    let keys = [];

    for (let line of lines) {
        if (!line.trim() || line.trim().startsWith('#')) continue;
        const indent = line.match(/^(\s*)/)[1].length;
        const trimmed = line.trim();

        // Key-value pair
        const kvMatch = trimmed.match(/^([^:]+):(?:\s*(.*))?$/);
        if (kvMatch) {
            const key = kvMatch[1].trim();
            let value = kvMatch[2] !== undefined ? kvMatch[2].trim() : '';

            // Handle indentation (nesting)
            if (indent > currentIndent) {
                parents.push(parents[parents.length - 1][keys[keys.length - 1]]);
                currentIndent = indent;
            } else if (indent < currentIndent) {
                while (currentIndent > indent) {
                    parents.pop();
                    keys.pop();
                    currentIndent -= 2;
                }
            }

            // Handle arrays
            if (value === '') {
                parents[parents.length - 1][key] = {};
            } else if (value === '[]') {
                parents[parents.length - 1][key] = [];
            } else if (value === '{}') {
                parents[parents.length - 1][key] = {};
            } else if (value === 'true' || value === 'false') {
                parents[parents.length - 1][key] = value === 'true';
            } else if (!isNaN(value)) {
                parents[parents.length - 1][key] = Number(value);
            } else {
                parents[parents.length - 1][key] = value;
            }
            keys.push(key);
        } else if (trimmed.startsWith('- ')) {
            // Array item
            const value = trimmed.slice(2).trim();
            const arr = parents[parents.length - 1][keys[keys.length - 1]];
            if (Array.isArray(arr)) {
                if (value === '') {
                    arr.push({});
                    parents.push(arr[arr.length - 1]);
                    currentIndent = indent + 2;
                } else if (value === 'true' || value === 'false') {
                    arr.push(value === 'true');
                } else if (!isNaN(value)) {
                    arr.push(Number(value));
                } else {
                    arr.push(value);
                }
            }
        }
    }
    return result;
}
