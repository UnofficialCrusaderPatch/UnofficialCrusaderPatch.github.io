{
    "categories": [
        {
            "title": "Popularity",
            "params": [
                { "field": "CriticalPopularity", "values": "0 to 10000 (0 to 100)", "description": "If popularity drops below this value the AI sells more stuff than usual to get money. 10000 is 100 popularity" },
                { "field": "LowestPopularity", "values": "0 to 10000 (0 to 100)", "description": "If popularity drops below this value the AI sets taxes (in steps) to TaxesMin. 10000 is 100 popularity" },
                { "field": "HighestPopularity", "values": "0 to 10000 (0 to 100)", "description": "Above this value the AI sets taxes back up until a stable 0 to -3 current popularity modifier is reached" }
            ]
        },
        {
            "title": "Taxes",
            "params": [
                 { "field": "TaxesMin", "values": "0 to 11", "description": "Minimum taxes allowed. 0 (min) to 11 (max) are the steps from +7 popularity to -24 popularity by taxes in the keep." },
                 { "field": "TaxesMax", "values": "0 to 11", "description": "Maximum of Taxes allowed. 0 (min) to 11 (max) are the steps from +7 popularity to -24 popularity by taxes in the keep." }
            ]
        },
        {
            "title": "Food",
            "params": [
                { "field": "MaxFood", "values": "Integer", "description": "Maximum amount of each different type of food the AI will keep in stock. This also includes wheat" },
                { "field": "MinimumApples", "values": "Integer", "description": "This amount of apples are 'saved' and only consumed if current popularity < LowestPopularity. If the AI has less than this amount it will prioritize buying the missing food" },
                { "field": "MinimumCheese", "values": "Integer", "description": "This amount of cheese is 'saved' and only consumed if current popularity < LowestPopularity. If the AI has less than this amount it will prioritize buying the missing food" },
                { "field": "MinimumBread", "values": "Integer", "description": "This amount of bread is 'saved' and only consumed if current popularity < LowestPopularity. If the AI has less than this amount it will prioritize buying the missing food" },
                { "field": "MinimumWheat", "values": "Integer", "description": "Below this amount the AI will prioritize buying wheat until it reaches this amount" },
                { "field": "MinimumHop", "values": "Integer", "description": "Below this amount the AI will prioritize buying hops until it reaches this amount" },
                { "field": "TradeAmountFood", "values": "Integer", "description": "The amount of food, wheat or hops bought at once. Only one of these trades is made per gametick" },
                { "field": "DoubleRations FoodThreshold", "values": "Integer", "description": "The AI will give double rations if it has at least this much food" },
                { "field": "MaxBeer", "values": "Integer", "description": "Max amount of beer to store on stockpile" }
            ]
        }
    ]
}
